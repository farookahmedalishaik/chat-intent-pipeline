# 4) push_data_artifacts.py

"""
Uploads the data artifacts generated by prepare_data.py to a dataset repository on the Hugging Face Hub. (acts as our central "cloud" storage for data)
"""
import os
from huggingface_hub import HfApi, login

# Import settings from config file
from config import (
    ARTIFACTS_DIR,
    HF_TOKEN,
    HF_DATASET_REPO_ID,
    LABEL_MAPPING_FILE,
    CLASS_WEIGHTS_FILE,
    TRAIN_DATA_FILE,
    VAL_DATA_FILE,
    TEST_DATA_FILE,
)

def main():
    """Main function to log in and upload data artifacts."""
    # Ensure the Hugging Face token is set
    if not HF_TOKEN:
        print("Hugging Face token not found. Set HF_TOKEN in your .env file.")
        return

    # Ensure the repo ID is configured
    if not HF_DATASET_REPO_ID:
        print("Hugging Face dataset repo ID is not configured. Set HF_DATASET_REPO_ID in .env")
        return

    print(f"Logging in to Hugging Face Hub....")
    login(token=HF_TOKEN)

    api = HfApi()

    # Create the dataset repository on the Hub (if it doesn't exist)
    print(f"Ensuring dataset repository '{HF_DATASET_REPO_ID}' exists on the Hub...")
    api.create_repo(
        repo_id=HF_DATASET_REPO_ID,
        repo_type="dataset",
        exist_ok=True,
    )

    # List of files that needs to upload from the local artifacts directory and  includes files generated by prepare_data.py
    files_to_upload = [
        LABEL_MAPPING_FILE,
        CLASS_WEIGHTS_FILE,
        TRAIN_DATA_FILE,
        VAL_DATA_FILE,
        TEST_DATA_FILE,
    ]

    print("\nStarting upload of data artifacts....")
    for file_path in files_to_upload:
        # Check if the local file exists before trying to upload
        if os.path.exists(file_path):
            file_name = os.path.basename(file_path)
            print(f"  -> Uploading {file_name}....")
            api.upload_file(
                path_or_fileobj=file_path,
                path_in_repo=file_name,
                repo_id=HF_DATASET_REPO_ID,
                repo_type="dataset",
            )
        else:
            print(f"  -> Skipping {os.path.basename(file_path)} (not found locally).")

    print(f"\n Successfully uploaded data artifacts to '{HF_DATASET_REPO_ID}'.")


if __name__ == "__main__":
    main()

    